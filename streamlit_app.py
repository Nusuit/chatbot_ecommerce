# streamlit_app.py
import streamlit as st
import requests
import json
import pandas as pd
import os

# Import c√°c h√†m RAG t·ª´ file utils_local.py
from utils_local import load_rag_components_for_local_demo, rag_pipeline_local, can_run_rag_local

st.set_page_config(page_title="Tiki Book Chatbot Demo (Local)", layout="wide")

st.title("üìö Tiki Book Chatbot (Local Demo)")
st.markdown("Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Chatbot Tiki S√°ch! H√£y h·ªèi m√¨nh v·ªÅ c√°c lo·∫°i s√°ch, t√°c gi·∫£, gi√° c·∫£, ho·∫∑c b·∫•t k·ª≥ th√¥ng tin n√†o v·ªÅ s√°ch m√† b·∫°n quan t√¢m. M√¨nh s·∫Ω c·ªë g·∫Øng gi·ªõi thi·ªáu nh·ªØng cu·ªën s√°ch ph√π h·ª£p nh·∫•t t·ª´ c∆° s·ªü d·ªØ li·ªáu c·ªßa Tiki.")
st.markdown("---")

# Load RAG components once when the Streamlit app starts
# S·ª≠ d·ª•ng st.cache_resource ƒë·ªÉ ch·ªâ t·∫£i m·ªôt l·∫ßn duy nh·∫•t
@st.cache_resource
def load_components():
    load_rag_components_for_local_demo()
    return can_run_rag_local

rag_is_ready = load_components()

if not rag_is_ready:
    st.error("‚ùå H·ªá th·ªëng chatbot ch∆∞a s·∫µn s√†ng. Vui l√≤ng ki·ªÉm tra l·ªói t·∫£i m√¥ h√¨nh ho·∫∑c d·ªØ li·ªáu ·ªü console.")
    st.stop() # D·ª´ng ·ª©ng d·ª•ng n·∫øu kh√¥ng t·∫£i ƒë∆∞·ª£c components

# Initialize chat history
if "messages" not in st.session_state:
    st.session_state.messages = []

# Display chat messages from history on app rerun
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])
        if message["role"] == "assistant_products" and isinstance(message["content"], list):
            # T√°i t·∫°o ph·∫ßn hi·ªÉn th·ªã s·∫£n ph·∫©m tham kh·∫£o n·∫øu mu·ªën
            st.markdown("---")
            st.markdown("**C√°c s·∫£n ph·∫©m ƒë∆∞·ª£c tham kh·∫£o ƒë·ªÉ tr·∫£ l·ªùi (th√¥ng tin n·ªôi b·ªô):**")
            for i, product in enumerate(message["content"]):
                st.markdown(f"**{i+1}. {product.get('product_name', 'N/A')}**")
                st.markdown(f"   * ID: {product.get('product_id', 'N/A')}")
                st.markdown(f"   * T√°c gi·∫£/Th∆∞∆°ng hi·ªáu: {product.get('author_brand_name', 'Kh√¥ng r√µ')}")
                st.markdown(f"   * Gi√°: {product.get('price', 0):,} ƒë·ªìng")
                st.markdown(f"   * S·ªë l∆∞·ª£ng ƒë√£ b√°n: {product.get('quantity_sold', 0)}")
                st.markdown(f"   * [Link s·∫£n ph·∫©m]({product.get('product_url_path', '#')})")
                st.markdown("")


# React to user input
if prompt := st.chat_input("B·∫°n mu·ªën t√¨m s√°ch g√¨?"):
    # Display user message in chat message container
    st.chat_message("user").markdown(prompt)
    # Add user message to chat history
    st.session_state.messages.append({"role": "user", "content": prompt})

    # Call the RAG pipeline directly
    try:
        with st.spinner("ƒêang t√¨m ki·∫øm v√† t·∫°o c√¢u tr·∫£ l·ªùi..."):
            # G·ªçi tr·ª±c ti·∫øp h√†m rag_pipeline_local
            # TƒÉng top_k_retrieval ƒë·ªÉ LLM c√≥ nhi·ªÅu ng·ªØ c·∫£nh h∆°n ƒë·ªÉ ch·ªçn l·ªçc th√¥ng minh
            chatbot_response, retrieved_products = rag_pipeline_local(prompt, top_k_retrieval=20) # TƒÉng l√™n 20

        # Display assistant response in chat message container
        with st.chat_message("assistant"):
            st.markdown(chatbot_response)
            # Kh√¥ng hi·ªÉn th·ªã ph·∫ßn "C√°c s·∫£n ph·∫©m ƒë∆∞·ª£c tham kh·∫£o ƒë·ªÉ tr·∫£ l·ªùi:"
            # N·∫øu b·∫°n mu·ªën xem l·∫°i, h√£y b·ªè comment ph·∫ßn code trong v√≤ng l·∫∑p messages ·ªü tr√™n
            # v√† th√™m d√≤ng n√†y v√†o ƒë√¢y:
            # if retrieved_products:
            #     st.session_state.messages.append({"role": "assistant_products", "content": retrieved_products})


        # Add assistant response to chat history
        st.session_state.messages.append({"role": "assistant", "content": chatbot_response})
        # L∆ØU √ù: N·∫øu b·∫°n mu·ªën l∆∞u th√¥ng tin s·∫£n ph·∫©m ƒë√£ tham kh·∫£o v√†o l·ªãch s·ª≠ chat
        # ƒë·ªÉ hi·ªÉn th·ªã l·∫°i khi refresh trang, b·∫°n c·∫ßn th√™m d√≤ng n√†y:
        if retrieved_products:
            st.session_state.messages.append({"role": "assistant_products", "content": retrieved_products})


    except Exception as e:
        error_message = f"‚ùå ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën: {e}"
        st.error(error_message)
        st.session_state.messages.append({"role": "assistant", "content": error_message})